::::::::::::::::::::::::::::::::::::::::::;;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Special Thanks to my good mate Bagas Ananta for writing this on his blog
Authors: Giovanni Arsenius and Bagas Ananta
Description: Steps by Steps instructions to setup a basic cucumber test framework to help with regression testing

Note:
You will probably have to change few things around to get it up and running.
My advice to you is to get the help of a ruby developer to help you set it up.
There are different ways of setting up a cucumber test framework this is simply a very basic one that you can use.

:::::::::::::::::::::::::::::::::::::::;;;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
STEP 1: Setting up Cucumber Automation
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Steps by Steps guide to Setup Cucumber automation test using Selenium webdriver in Ruby

This is a guide on how to create a project to write a cucumber automation test using Selenium Webdriver in Ruby.
I will assume that the OS platform is in Windows but you can also use the steps for Linux or Mac.
I will cover how to setup the project in Ubuntu in a different blog later when i get a chance.

Please note that there are many ways to do this. This is just the way I setup a new project. 
I use Capybara in my automation project.

The first part is to setup ruby and ruby gems into your local machine.

1. Download ruby
2. Download RubyMine
3. Open command line prompt in windows and type "set http_proxy=proxy-name:8080"
- You only need to do this step if you need to use proxy to access the net. We will need it so that we can download the ruby gems
4. Gem install cucumber -v 0.6.4
5. Gem install rake -v 0.8.7
6. Gem install rspec -v 1.2.8
7. Gem install capybara -v 0.3.9
8. Gem install gizmo -v 0.1.1
9. Gem install win32-process
10. Gem install win32console

(For Linux/Mac users you might want to use 'sudo gem install [gemname]

The second part is to create a new project:

You might want to read more about Cucumber, Steps definitions, and Page Models before continuing on the steps.

1. Open ruby mine and create a new project
2. Create the following directories
"features/regression"
"features/step_definitions"
"features/support/pages"
"features/support/patches"

The following steps are to initialize cucumber

3. Create a new file called "env.rb" under "features/support"

require 'spec/expectations'
require 'uri'
require 'net/http'

#CAPYBARA
require 'capybara/cucumber'
require 'capybara/session'
require 'features/support/patches/capybara'
Capybara.default_driver = :selenium
Capybara.run_server = false
Capybara.default_selector = :css
Capybara.default_wait_time = 10

#gizmo!!
require 'gizmo'
World(Gizmo::Helpers)

Gizmo.configure do |config|
  config.mixin_dir = File.dirname(__FILE__) + '/../pages'
end


4. Create a new file called "capybara.rb" under "features/support/patches"

if Object.const_defined? :Capybara
    module Capybara
        alias :response :page
    end
end


5. Create a new file called "cucumber.yml" at the top level directory

default: -r features/support/ -r features/step_definitions


Writing the Cucumber Scenarios file

6. Create a new file called "search.feature" under "features/regression"

Feature: A simple google search

Scenario: A simple google search scenario
  Given I am on the main google search
  And I search for "site:qastuffs.blogspot.com"
  And I click on the search button
  And I click on the first result
  Then I should land on the qastuffs blog


Writing the Steps Definitions

7. Create a new file called "search_steps.rb" under "features/step_definitions"

Given /^I am on the main google search$/ do
  visit "http://www.google.com"
end

Given /^I search for "([^\"]*)"$/ do |query|
  on_page_with :google do |page|
    page.fill_in_search query
  end
end

Then /^I click on the search button$/ do
  on_page_with :google do |page|
    page.click_submit_button
  end
end

Then /^I click on the first result$/ do
  on_page_with :google do |page|
    page.click_first_result
    page.should have_css(page.qastuffs_main_css)
  end
end

Then /^I should land on the qastuffs blog$/ do
  on_page_with :qastuffs do |page|
    page.valid?.should == true
  end
end


Writing the Page Definitions

8. Create a new file called "page_with_google.rb" under "features/support/pages"

module PageWithGoogle
  include Gizmo::PageMixin

  def valid?
    if title =~ /.*Google.*/
      return true
    else
      return false
    end
  end

  def title
    @document.xpath("//title").inner_text
  end

  def fill_in_search query
    fill_in 'q', :with=> query
  end

  def click_submit_button
    click "Google Search"
  end

  def qastuffs_main_css
    ".description"
  end

  def click_first_result
    locate(:xpath, ".//*[@id='rso']/li[1]/h3/a").click
  end
  
end

9. Create a new file called "page_with_qastuffs.rb" under "features/support/pages"

module PageWithQastuffs
  include Gizmo::PageMixin

  def valid?
    title.should =~ /.*QA Blog.*/
  end

  def title
    @document.xpath("//title").inner_text
  end
   
end


How to run the Cucumber Test

10. Open command line prompt
11. Go to the project
12. Type "cucumber features\regression\search.feature"

The above command will run the test for search.feature.

Note that if you need to run the test against multiple URL/environments, you can setup a YAML configuration file.
Instruction on how to do it can be found below

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
How to setup Cucumber YAML Configuration File
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
Application configurations should be placed in one location and we can do this by using an external YAML file called config.yaml. On my blog on Setting up a cucumber project, I have not covered on how to create a config.yml file. This file is where you normally put your BASE_URL address and other configuration files for you to use in your projects.

For examples, you might want to run your test against a test, staging or production environments and for that you need to tell your code which url you want to test. So, here is how you write a config.yml file and how to use it.

I assume that you have the same project structure mentioned in here

1. Create a new config.yml file under features\support\config.yml


  google_australia:
    base_url: http://www.google.com.au

  google_singpaore:
    base_url: http://www.google.com.sg


2. Create a new "features\support\lib\configuration.rb" files to load the config.yml


require 'yaml'

class Configuration
  def self.[] key
    @@config[key]
  end

  def self.load name
    @@config = nil
    io = File.open( File.dirname(__FILE__) + "/../config.yml" )
    YAML::load_documents(io) { |doc| @@config = doc[name] }
    raise "Could not locate a configuration named \"#{name}\"" unless @@config
  end

  def self.[]= key, value
    @@config[key] = value
  end

end

raise "Please set the TEST_ENV environment variable" unless ENV['TEST_ENV']
Configuration.load(ENV['TEST_ENV'])


3. Add the following lines in your "features\support\env.rb" file

require File.dirname(__FILE__) + '/patches/capybara'; 
require File.dirname(__FILE__) + '/lib/configuration';
BASE_URL = Configuration["base_url"]


4. Now modify "features\step_definitions\search_steps.rb"

Change


Given /^I am on the main google search$/ do
  visit "http://www.google.com"
end


to


Given /^I am on the main google search$/ do
  visit "#{BASE_URL}"
end


5. Now before you run the project you just need to set the TEST_ENV


set test_env=google_australia


This will run your test againts www.google.com.au. If you set the test_env=google_singapore then
your test will run againts www.google.com.sg 
